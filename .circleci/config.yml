version: 2.1

orbs:
  slack: circleci/slack@4.12.1

commands:
  notify_on_success:
      steps:
        - slack/notify:
            event: pass
            channel: C04TQUD2525
            template: basic_success_1

  notify_on_failure:
    steps:
      - slack/notify:
          channel: C04TQUD2525
          event: fail
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install software-properties-common -y
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install nodejs
    steps:
      - run:
          name: Install nodejs
          command: |
            curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            sudo apt-get install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm test
      - notify_on_failure
            
  scan-frontend:
      docker:
        - image: cimg/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: scan front-end
            command: |
              cd frontend
              npm install
              npm audit fix --force --audit-level=critical
        - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs 
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - notify_on_failure
      - notify_on_success
      - destroy-environment   

  configure-infrastructure:
      docker:
        - image: cimg/base:stable
      steps:
        - checkout
        - install_awscli
        - install_ansible
        - install_nodejs
        - add_ssh_keys:
            fingerprints: ["da:91:c7:44:f9:c1:b4:2a:9d:21:0d:1c:d5:f5:60:54"]
        - attach_workspace:
            at: ~/
        - run:
            name: Configure Server
            command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
        - notify_on_failure
        - notify_on_success
        - destroy-environment      

  run-migrations:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            cd backend
            npm install
            npm run premigrations
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt  
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -d '1' https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:5}
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs 
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
      - destroy-environment
      - revert-migrations      
                    
  deploy-backend:
        docker:
          - image: cimg/base:stable
        steps:
          - checkout
          - install_awscli
          - install_ansible
          - install_nodejs
          - add_ssh_keys:
              fingerprints: ["da:91:c7:44:f9:c1:b4:2a:9d:21:0d:1c:d5:f5:60:54"]
          - run:
              name: Deploy backend
              command: | 
                export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
                echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt

                cd backend
                npm i
                npm run build
                echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
                echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
                echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
                echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
                echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
                echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
                echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
                echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
                tar -czf artifact.tar.gz dist/* package* .env
                cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
                ls ../.circleci/ansible/roles/deploy/
                cd ../.circleci/ansible
                ansible-playbook -i inventory.txt deploy-backend.yml
          - destroy-environment
          - revert-migrations  

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            
            API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations
      
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations 

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches: 
      #         only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]